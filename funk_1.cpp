// в данном проекте демонстрируются 3 основных способа передачи информации
// (переменных) в функцию : по значению, по указателю, по ссылке
#include <stdio.h>                          // ПО ССЫЛКЕ РАБОТАЕТ ТОКА В С++ !!!!!!!!!!!!!!!!!!!!!!!!!!
#include <locale.h>
#include <windows.h>

// будем рассматривать примеры,где фу будут получать данные через ПАРАМЕТРЫ , А НЕ ЧЕРЕЗ ГЛОБАЛЬНУЮ область данных  

void fun1(int aa, int bb);          // прототип функции с "параметрами по значению"
void fun2(int a, int b);          // аналогично функции fun1
void fun3(int *a, int *b);      // прототип функции с "параметрами по указателю"
void fun4(int &aa, int &bb);      // прототип функции с "параметрами по ссылке"
void fun5(int *(*p));
int main()
{
	setlocale(LC_ALL, "Russian");
	int a, b,c=7;

	int *pa, *pb;
	pa = (int *)malloc(10 * sizeof(int)); /* pa это динамический массив
										     АРГУМЕНТ( 10*sizeof(int) )  количество байт памяти, которую необходимо выделить,
											 ВОЗВРАЩАЕТ (int *) указатель на выделенный блок в памяти.
										  */
	pb = &c;


	//double d;
	scanf_s("%d%d", &a, &b);
	system("CLS");
	printf("\n исх. значения переменных        a = %d   b=%d", a, b);
	fun1(a, b);                                // ФАКТИЧЕСКИЕ ПАРАМЕТРЫ (a,b)         // фу main() при вызове fun1 передает переменные в системный стек, при запуске fun1()  a и b из системного стека вычитывает данные в переменные aa и bb       
	                                           // они же локальные для функции main()
	printf("\nф-ция с параметрами по значению  a = %d   b=%d", a, b);
	fun2(a, b);       //
	printf("\nф-ция с параметрами по значению  a = %d   b=%d", a, b);
	fun3(&a, &b);
	printf("\nф-ция с параметрами по указателю a = %d   b=%d", a, b);
	fun4(a, b);
	printf("\nф-ция с параметрами по ссылке    a = %d   b=%d", a, b);

	             fun5(&pb);

	return 0;
}

void fun1(int aa, int bb)                     // ФОРМАЛЬНЫЕ ПАРАМЕТРЫ aa, bb
{                                             // они же локальные для функции fun1()
	aa--;   // в этой функции измененное значение локальных  
	bb++;   // переменных aa и bb не передается в main 
	printf("\nрезультат в ф-ции    fun1       aa = %d   bb=%d", aa, bb);
}

void fun2(int a, int b)                                               
{
	a--;   // в этой функции измененное значение локальных  
	b++;   // переменных aa и bb не передается в main 
	printf("\nрезультат в ф-ции    fun2        a = %d   b=%d", a, b);
}

void fun3(int *a, int *b)
{
	(*a)++;      // в этой функции выполняется изменение значений переменных расположенных  
	(*b) += *a;  // по адресам которые переданы в функцию. Сл-но измененное значение "видно" в main
	printf("\nрезультат в ф-ции    fun3  *(a) = %d  *(b)=%d", *a, *b);
}
void fun4(int &aa, int &bb)
{                // в этом случае идентификаторы aa и bb являются синонимами имен переменных 
	aa++;        // a и b используемых в main (т.е. втрыми именами этих переменных)
	bb--;        // все изменения aa и bb отражаются на значении переменных a и b в main
	printf("\nрезультат в ф-ции    fun4     aa = %d   bb=%d", aa, bb);
}




void fun5(int *(*p))
{
	  
	(*(*p)) += 2;  // по адресам которые переданы в функцию. Сл-но измененное значение "видно" в main
	printf("\nрезультат в ф-ции    fun5  **p = %d  *p=%d", **p,*p);
}