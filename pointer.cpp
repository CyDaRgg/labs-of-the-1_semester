 //ниже приведены несколько примеров работы с одномерным массивом использу€ ” ј«ј“≈Ћ№ на него

#include<stdio.h>
#include<conio.h>
#include <locale.h>
#include <windows.h>
#include<stdlib.h>

int Vvod(int n, int *MS,int k)
{
	if (!MS) return 1;                 // проверка не нулевой ли указатель на массив 
	printf("введите значени€ в масив MS ");
	if (n == 1) printf("по возрастанию\n");
	else  printf("по убыванию\n");
	int i = 0, j;
	while (i < k)                      // цикл по кол-ву элементов массива
	{
		printf("MS[ %d ] = ", i);
		j=scanf_s("%d", MS+i);
		if (j && (i == 0 || 
			      (n == 1 && *(MS+i) >= *(MS+i-1)) ||
				  (n == 2 && *(MS+i) <= *(MS+i-1)) ) ) i++;
	}
  return 0;
}

int Vvod(int *MS, int k)
{
	int i = 0;
	int j;
	if (!MS) return 1;                 // проверка не нулевой ли указатель на массив 
	while (i < k)                      // цикл по кол-ву элементов массива
	{
		printf("MS[ %d ] = ", i);
		fflush(stdin); //rewind(stdin);// чистка входного буфера
		if (scanf_s("%d", MS + i)) i++;  // проверка введено ли число
	}
	return 0;
}

void Print(int MS[], int k)      //  здесь MS[] и *MS  - эквивалентны  
{
	if (!MS) return;                  // проверка не нулевой ли указатель на массив
	printf("масив  : ");
	for (int i = 0; i < k; i++)       // цикл поэлементного вывода массива на экран 
		printf("%4d", MS[i]);
	printf("\n");
}

//--------------------------------------------- пример 1 -----------------------------------

int main()
{
	setlocale(LC_ALL, "Russian");
	int *ms1, *ms2, *ms3, n1, n2, i1, i2, i3, k1, k2;
	printf("введите размерность первого массива n1= ");
	scanf_s("%d", &n1);
	printf("введите размерность второго массива n2= ");
	scanf_s("%d", &n2);
	if (!n1 && !n2) return 0;
	if (!(ms1 = (int *)calloc(n1, sizeof(int))))
  { return 0; }                                 // выделение пам€ти под массив ms1 с проверкой и обнуление
	if (!(ms2 = (int *)calloc(n2, sizeof(int))))  // выделение пам€ти под массив ms2 с проверкой и обнуление
	{
		free(ms1); return 0; // в случае ошибки выделени€ пам€ти - освобождение ранее выделенной пам€ти (ms1)
	}
	if (!(ms3 = (int *)calloc(n1 + n2, sizeof(int))))
	{
		free(ms1); free(ms2); return 0;
	}	
	Vvod(1,ms1,n1);           // вызов функции ввода информации в массив ms1
	system("CLS"); 
	Vvod(2, ms2, n2);         // вызов функции ввода информации в массив ms2
	system("CLS");
	Print(ms1,n1);            // вызов функции вывода информации массива ms1 на экран
	Print(ms2,n2);            // вызов функции вывода информации массива ms2 на экран

	i1 = i3 = 0;  // индексы массивов ms1 и ms3 - устанавливаютс€ в начало 
	i2 = n2 - 1;  // индекс массива ms2 в устанавливаетс€ конец
	do            // цикл движени€ по ms1 с начала в конец и ms2 с конца в начало
	{             // цикл перезаписи эл-тов из массива  ms1 в  ms3
		while (*(ms1 + i1) <= *(ms2 + i2) && i1<n1) *(ms3 + i3++) = *(ms1 + i1++);
		if (i1 >= n1) break;  // выход из цикла do ... while если массив ms1 окончилс€
	      	      // цикл перезаписи эл-тов из массива  ms2 в  ms3
		while (*(ms1 + i1)> *(ms2 + i2) && i2<n2) *(ms3 + i3++) = *(ms2 + i2--);
	} while (i1<n1 && i2>=0); 

	while (i1<n1) *(ms3 + i3++) = *(ms1 + i1++);   // цикл дозаписи эл-тов из массива  ms1 в  ms3
	while (i2 >= 0) *(ms3 + i3++) = *(ms2 + i2--); // цикл дозаписи эл-тов из массива  ms2 в  ms3

	Print(ms3, n1+n2);        // вызов функции вывода информации массива ms3 на экран
	free(ms1); free(ms2); free(ms3); // освобождение пам€ти выделенной выше дл€ массивов
	return 0;
}