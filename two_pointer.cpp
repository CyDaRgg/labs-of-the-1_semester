#include <stdio.h>
#include <conio.h>
#include <locale.h>
#include <windows.h>
#include <stdlib.h>

int Vvod(int **MS, int n_str, int n_stl)
{
	int i, j, fl;
	if (!MS)                           // проверка не нулевой ли указатель
	{
		puts("память для массива (матрицы) не выделена");
		return 1;
	}
	printf("\nВвод массива (матрицы)\n");
	for (i = 0; i < n_str; i++)        // цикл по строкам массива(матрицы)
		for (j = 0; j < n_stl; j++)        // цикл по элементам строки (столбцам) массива(матрицы)
		{
			printf("MS[ %d ][ %d ] = ", i, j);
			fflush(stdin); //rewind(stdin);        // чистка входного буфера
			if (!scanf_s("%d", *(MS + i) + j)) j--;  // проверка введено ли число
			// if (!scanf("%d", &MS[i][j]));       // можно использовать и MS[i][j] 
		}
	return 0;
}

void Print(int **MS, int n_str, int n_stl)
{
	int i, j;
	if (!MS)                              // проверка не нулевой ли указатель
	{
		puts("память для массива (матрицы) не выделена");
		return;
	}
	printf("\n");
	for (i = 0; i < n_str; i++)           // цикл по строкам массива(матрицы)
	{
		for (j = 0; j < n_stl; j++)       // цикл по элементам строки (столбцам) массива(матрицы)
			printf("%4d", *(*(MS + i) + j));
		// printf("%4d", MS[i][j]);   // можно использовать и MS[i][j] 
		printf("\n");
	}
}


//--------------------------------------------- пример 1 -----------------------------------
// пример работы с двухмерным массивом через указатель на указатель
// найти выше главной диагонали max ст-ц и ниже min
int main()
{
	setlocale(LC_ALL, "Russian");
	int **p= nullptr, n, s, i, j, j1, j2, sum1, sum2, sum;
	do
	{
		system("CLS");
		printf("\nвведите размерность квадратной матрицы\n");
		i = scanf_s("%d", &n);
		if (i<1)
		{
			fflush(stdin);  // чистка буффера клавиатуры при ошибке ввода
			continue;       // повтор цикла
		}
		s = n;             // матрица квадратная (число строк=числу столбцов)
		if (!(p = (int **)malloc(sizeof(int*)*n)))
			printf("\nНедостаточно свободной памяти \nуменьшите число строк матрицы");
		for (i = 0; i<n; i++) // цикл выбора указателя на строку матрицы
		if (!(*(p + i) = (int *)malloc(sizeof(int)*s))) // выделение памяти под строку матрицы
		{                                               // с проверкой выделена ли память
			printf("\nНедостаточно свободной памяти \nуменьшите число ст-цов матрицы");
			for (j = 0; j<i; j++) free(*(p + j)); free(p); // освобождение памяти при ошибке
			p = nullptr;   // сброс указателя для повтора операции выделения памяти
			break;         // выход из цикла по i (выбора указателя на строку матрицы)
		}
	} while (!p);          

	Vvod(p, n, s);
	system("CLS");
	printf("\nВведенная матрица");
	Print(p, n, s);
	sum = 0;               // sum - переменная для накопления текущей суммы (выше/ниже) диагон. 
                                   // sum1 и sum2 - переменные (контрольные) для анализа сумм                               // в анализир. ст-це с их начальной инициализацией
	sum1 = *(*p + 1);              // для поиска max ст-ца выше диагонали (верхний эл-т второго ст-ца)
	sum2 = *(*(p + n - 1) + s - 2);// для поиска min ст-ца ниже диагонали (нижний эл-т предпосл. ст-ца)
	j1 = 1; j2 = s - 2;            // стартовые номера ст-цов (второй и предпоследний)
	for (j = 0; j<s; j++)          // цикл выбора очередного столбца матрицы к анализу
	{
		for (i = 0; i<n; i++)      // цикл по элементам этого (j-го) ст-ца
		if (i != j) sum += *(*(p + i) + j);// выбран для суммы не элемент диагонали
		else                               // выбран элемент диагонали
		{
			if (sum1<sum)                  // найден ст-ц с большей суммой чем sum1
			{
				sum1 = sum;  j1 = j;       // запоминаем найденную сумму и номер ст-ца с этой суммой
				sum = 0;                   // сброс суммы для подсчета суммы под диагональю  
			}
		}
		if (j<s - 1 && sum2>sum)           // найден ст-ц с меньшей суммой чем sum2
		{
			sum2 = sum; j2 = j;            // запоминаем найденную сумму и номер ст-ца с этой суммой
		}
		sum = 0;                           // сброс суммы для аналица следующего ст-ца
		
	}
	for (i = 0; i<n; i++)                 // НАПРИМЕР обнуление найденных ст-цов (или что-либо иное)
	{
		if (i<j1) *(*(p + i) + j1) = 0;
		if (i>j2) *(*(p + i) + j2) = 0;
	}
	printf("\n\nПреобразованная матрица");
	Print(p, n, s);
	for (i = 0; i<n; i++)  free(*(p + i));// освобождение памяти на которую указывает p[i]  
	free(p);                              // освобождение памяти на которую указывает p
	//getch();                    
	return 0;
}
